class Integer
	def self.one
		return 1
	end

	def self.zero
		return 0
	end

	def bit_size
		return ilog2(self) + 1
	end

	# Param::  non-negative integer n
	# Return:: factorial n!
	def factorial
		return (2..self).inject(1) {|r, i| r * i}
	end

	# Test whether a given number is a square number or not
	# Param::  positive integer n
	# Return:: root(n) if n is square else false
	def square?
		check = {
			11=>[true, true, false, true, true, true, false, false, false, true, false],
			63=>[true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, true,false, false, false, false],
			64=>[true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false,false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false],
			65=>[true, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true]
		}

		# 64
		t = self & 63
		return false unless check[64][t]

		r = self % 45045	# == 63 * 65 * 11
		[63, 65, 11].each do |c|
			return false unless check[c][r % c]
		end

		q = isqrt(self)
		return false if q ** 2 != self

		return q
	end

	# Triangle numbers are generated by the formula, T_n = n * (n + 1) / 2.
	# The first ten triangle numbers are:
	#     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	# Return:: integer n s.t. self == T_n if exist else false
	def triangle?
		return false unless r = ((self << 3) + 1).square?
		return false unless (r - 1).even?

		return (r - 1) >> 1
	end

	# Pentagonal numbers are generated by the formula, P_n = n * (3 * n - 1) / 2.
	# The first ten pentagonal numbers are:
	#     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
	# Return:: integer n s.t. self == P_n if exist else false
	def pentagonal?
		return false unless r = (24 * self + 1).square?

		q, r = (1 + r).divmod(6)
		return false unless 0 == r

		return q
	end

	# Hexagonal numbers are generated by the formula, H_n = n * (2 * n - 1)
	# The first ten hexagonal numbers are:
	#     1, 6, 15, 28, 45, 66, 91, 120, 153, 190, ...
	# Return:: integer n s.t. self == H_n if exist else false
	def hexagonal?
		return false unless r = ((self << 3) + 1).square?
		return false unless 0 == (1 + r) & 3

		return (1 + r) >> 2
	end
end
